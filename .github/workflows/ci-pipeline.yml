name: devsecops-pipeline

on:
  push:
    branches:
      - laboratorio-final
      - main
      - 'feature/**'
  pull_request:
    branches:
      - laboratorio-final
      - main

# Cambia ENFORCE en Repository Variables para activar bloqueo (“true”) o solo aviso (“false”)
env:
  ENFORCE: ${{ vars.ENFORCE || 'false' }}

jobs:

  # 1) SAST con SonarCloud
  sast_sonar:
    runs-on: ubuntu-latest
    continue-on-error: true     # Que el job “falle” pero no frene el pipeline
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar Sonar Scanner (CLI)
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O sonar-scanner.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-* sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Analizar código con Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          sonar-scanner \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.token="${SONAR_TOKEN}" \
            -Dsonar.branch.name="${{ github.head_ref || github.ref_name }}"

      - name: SAST – evaluar severidad (MEDIUM+)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          echo "🔍 SAST: buscando vulnerabilidades MEDIUM/HIGH/CRITICAL..."
          VULN_COUNT=$(curl -s -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=VULNERABILITY&severities=MAJOR,CRITICAL,BLOCKER" \
            | jq '.total')

          echo "SAST – vulnerabilidades MEDIUM+: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 SAST: hay vulnerabilidades. ENFORCE=${ENFORCE}"
            if [ "${ENFORCE}" = "true" ]; then
              echo "❌ SAST en modo bloqueo."
              exit 1
            else
              echo "ℹ️  SAST en modo aviso (no se bloquea)."
            fi
          else
            echo "✅ SAST: sin vulnerabilidades MEDIUM/HIGH/CRITICAL."
          fi

  # 2) SCA de dependencias con Trivy (filesystem)
  sca_dependencies:
    runs-on: ubuntu-latest
    needs: [sast_sonar]
    if: ${{ always() }}          # Corre aunque SAST haya “fallado”
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
          trivy --version

      - name: SCA – generar reporte (no bloquear acá)
        run: |
          echo "🔍 SCA: analizando dependencias..."
          trivy fs --security-checks vuln --format json . > sca-report.json || true
          echo "✅ SCA: reporte generado => sca-report.json"

      - name: SCA – evaluar severidad (MEDIUM+)
        run: |
          echo "🔍 SCA: verificando MEDIUM/HIGH/CRITICAL en dependencias..."
          VULN_COUNT=$(jq '[.. | objects? | select(.Severity=="CRITICAL" or .Severity=="HIGH" or .Severity=="MEDIUM")] | length' sca-report.json)
          echo "SCA – vulnerabilidades MEDIUM+: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 SCA: hay vulnerabilidades. ENFORCE=${ENFORCE}"
            if [ "${ENFORCE}" = "true" ]; then
              echo "❌ SCA en modo bloqueo."
              exit 1
            else
              echo "ℹ️  SCA en modo aviso (no se bloquea)."
            fi
          else
            echo "✅ SCA: sin vulnerabilidades MEDIUM/HIGH/CRITICAL."
          fi

  # 3) Build de imagen Docker
  build_image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [sast_sonar, sca_dependencies]
    if: ${{ always() }}          # Construye igual para poder escanear la imagen
    env:
      IMAGE_NAME: devsecops-lab/app
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker info
        run: |
          docker version
          docker info

      - name: Build (Dockerfile en la raíz)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "🧱 Construyendo ${IMAGE_NAME}:${IMAGE_TAG}"
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" .
          echo "🔎 Imágenes locales:"
          docker images "${IMAGE_NAME}" --digests

          # Metadatos útiles para evidencias y para el escaneo de imagen
          {
            echo "IMAGE_NAME=${IMAGE_NAME}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
            docker images "${IMAGE_NAME}" --digests
          } > build-metadata.txt

      - name: Export image as artifact
        run: |
          docker save "${IMAGE_NAME}:${IMAGE_TAG}" -o docker-image.tar
          ls -lh docker-image.tar build-metadata.txt

      - name: Subir artefactos de build
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-${{ github.sha }}
          path: |
            docker-image.tar
            build-metadata.txt
          if-no-files-found: error

  # 4) Seguridad de imagen (Trivy image)
  image_security:
    name: Image Security (Trivy scan)
    runs-on: ubuntu-latest
    needs: [build_image]
    if: ${{ always() }}
    continue-on-error: true
    env:
      IMAGE_NAME: devsecops-lab/app
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Descargar artefacto de la imagen
        uses: actions/download-artifact@v4
        with:
          name: docker-build-${{ github.sha }}

      - name: Cargar imagen en Docker
        run: |
          docker load -i docker-image.tar
          docker images "${IMAGE_NAME}" --digests

      - name: Instalar Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
          trivy --version

      - name: Escanear imagen (no bloquear acá)
        run: |
          echo "🔍 Trivy (image): ${IMAGE_NAME}:${IMAGE_TAG}"
          trivy image --format json --security-checks vuln \
            --severity MEDIUM,HIGH,CRITICAL \
            "${IMAGE_NAME}:${IMAGE_TAG}" > trivy-image.json || true
          echo "✅ Reporte de imagen => trivy-image.json"

      - name: Evaluar severidad (MEDIUM+) y decidir bloqueo
        run: |
          echo "🔍 Verificando MEDIUM/HIGH/CRITICAL en la imagen..."
          VULN_COUNT=$(jq '[.. | objects? | select(.Severity=="CRITICAL" or .Severity=="HIGH" or .Severity=="MEDIUM")] | length' trivy-image.json)
          echo "IMAGE – vulnerabilidades MEDIUM+: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 Imagen: hay vulnerabilidades. ENFORCE=${ENFORCE}"
            if [ "${ENFORCE}" = "true" ]; then
              echo "❌ Image Security en modo bloqueo."
              exit 1
            else
              echo "ℹ️  Image Security en modo aviso (no se bloquea)."
            fi
          else
            echo "✅ Imagen sin vulnerabilidades MEDIUM/HIGH/CRITICAL."
          fi

      - name: Publicar reporte de imagen
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report-${{ github.sha }}
          path: trivy-image.json
          if-no-files-found: error

   # 5) Generar resumen visual de los resultados (Summary tab)
  generate_report:
    name: Resumen de escaneos
    needs: [sast_sonar, sca_dependencies, image_security]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Generar resumen general
        run: |
          echo "# 🧾 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 SAST (SonarCloud)" >> $GITHUB_STEP_SUMMARY
          echo "Estado: **${{ needs.sast_sonar.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🧩 SCA (Dependencias - Trivy FS)" >> $GITHUB_STEP_SUMMARY
          echo "Estado: **${{ needs.sca_dependencies.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🐳 Image Security (Trivy Image)" >> $GITHUB_STEP_SUMMARY
          echo "Estado: **${{ needs.image_security.result }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🧠 *Este resumen se genera automáticamente para facilitar la revisión del pipeline.*" >> $GITHUB_STEP_SUMMARY

  # 6) Quality Gate final – resume y rompe si corresponde
  quality_gate:
    name: Quality Gate final
    runs-on: ubuntu-latest
    needs: [sast_sonar, sca_dependencies, build_image, image_security, generate_report]
    if: ${{ always() }}
    steps:
      - name: Resumen de resultados
        run: |
          echo "SAST: ${{ needs.sast_sonar.result }}"
          echo "SCA : ${{ needs.sca_dependencies.result }}"
          echo "IMG : ${{ needs.image_security.result }}"
          echo "ENFORCE=${ENFORCE}"

          FAILED=0
          for r in "${{ needs.sast_sonar.result }}" "${{ needs.sca_dependencies.result }}" "${{ needs.image_security.result }}"; do
            if [ "$r" = "failure" ]; then FAILED=1; fi
          done

          if [ "${ENFORCE}" = "true" ] && [ "$FAILED" -eq 1 ]; then
            echo "🚨 Quality Gate: FAIL (vulnerabilidades detectadas)."
            exit 1
          else
            echo "✅ Quality Gate: PASS (o modo aviso activo)."
          fi
