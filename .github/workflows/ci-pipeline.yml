name: devsecops-pipeline

on:
  push:
    branches:
      - laboratorio-final
      - main
      - 'feature/**'
  pull_request:
    branches:
      - laboratorio-final
      - main

jobs:

  # 1. SAST (Static Application Security Testing) con SonarCloud
  sast_sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Sonar Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O sonar-scanner.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-* sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run Sonar Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          sonar-scanner \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.token="${SONAR_TOKEN}" \
            -Dsonar.branch.name="${{ github.head_ref || github.ref_name }}"

      - name: Verificar vulnerabilidades medias o mayores (SAST)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          echo "üîç Verificando vulnerabilidades de severidad MEDIA o mayor en c√≥digo fuente (SAST)..."
          VULN_COUNT=$(curl -s -u "${SONAR_TOKEN}:" \
            "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=VULNERABILITY&severities=MAJOR,CRITICAL,BLOCKER" \
            | jq '.total')

          echo "Vulnerabilidades encontradas en c√≥digo: $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "üö® ‚ö†Ô∏è Se detectaron vulnerabilidades, pero se permite continuar para pruebas de SCA."
          else
            echo "‚úÖ No hay vulnerabilidades medias o mayores en el c√≥digo. Continuando."
          fi

  # 2. SCA (Software Composition Analysis) sobre dependencias
  sca_dependencies:
    runs-on: ubuntu-latest
    needs: sast_sonar
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Instalar Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release

          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg

          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list

          sudo apt-get update -y
          sudo apt-get install -y trivy

          trivy --version

      - name: Escaneo SCA de dependencias (Trivy filesystem)
        run: |
          echo "üîç Analizando dependencias (SCA)..."
          # Generamos reporte JSON sin romper todav√≠a
          trivy fs --security-checks vuln --format json . > sca-report.json || true

          echo "‚úÖ Reporte SCA generado en sca-report.json"

      - name: Evaluar severidad de vulnerabilidades en dependencias
        run: |
          echo "üîç Verificando vulnerabilidades MEDIUM/HIGH/CRITICAL en dependencias..."
          VULN_COUNT=$(cat sca-report.json | jq '[.. | objects? | select(.Severity == "CRITICAL" or .Severity == "HIGH" or .Severity == "MEDIUM")] | length')

          echo "Vulnerabilidades en dependencias (MEDIUM o mayor): $VULN_COUNT"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "üö® ‚ö†Ô∏è Se detectaron vulnerabilidades, pero se permite continuar para pruebas de Image Security."
          else
            echo "‚úÖ No se detectaron vulnerabilidades medias o mayores en dependencias. Pipeline exitoso."
          fi

  # 3. Docker file creado en la ra√≠z del proyecto
  build_image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [sast_sonar, sca_dependencies]   # respeta el orden del pipeline
    env:
      IMAGE_NAME: devsecops-lab/app
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker info
        run: |
          docker version
          docker info

      - name: Build (Dockerfile en la ra√≠z)
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "üß± Construyendo ${IMAGE_NAME}:${IMAGE_TAG}"
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" .
          echo "üîé Im√°genes locales:"
          docker images "${IMAGE_NAME}" --digests

          # metadatos para evidencia y para el punto 5
          {
            echo "IMAGE_NAME=${IMAGE_NAME}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
            docker images "${IMAGE_NAME}" --digests
          } > build-metadata.txt

      - name: Export image as artifact
        run: |
          docker save "${IMAGE_NAME}:${IMAGE_TAG}" -o docker-image.tar
          ls -lh docker-image.tar build-metadata.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-${{ github.sha }}
          path: |
            docker-image.tar
            build-metadata.txt
          if-no-files-found: error
   
# 4. trivy scan para Docker file 
  image_security:
    name: 5) Image Security (Trivy scan)
    runs-on: ubuntu-latest
    needs: build_image
    env:
      IMAGE_NAME: devsecops-lab/app
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Descargar artefacto de la imagen
        uses: actions/download-artifact@v4
        with:
          name: docker-build-${{ github.sha }}

      - name: Cargar imagen en Docker
        run: |
          docker load -i docker-image.tar
          docker images "${IMAGE_NAME}" --digests

      - name: Instalar Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy
          trivy --version

      - name: Escanear imagen con Trivy (no bloquear a√∫n)
        run: |
          echo "üîç Escaneando imagen ${IMAGE_NAME}:${IMAGE_TAG}..."
          trivy image --format json --security-checks vuln \
            --severity MEDIUM,HIGH,CRITICAL \
            "${IMAGE_NAME}:${IMAGE_TAG}" > trivy-image.json || true
          echo "‚úÖ Reporte generado: trivy-image.json"

      - name: Evaluar severidad y bloquear si hay MEDIUM/HIGH/CRITICAL
        run: |
          echo "üîç Verificando vulnerabilidades MEDIUM/HIGH/CRITICAL en la imagen..."
          VULN_COUNT=$(jq '[.. | objects? | select(.Severity=="CRITICAL" or .Severity=="HIGH" or .Severity=="MEDIUM")] | length' trivy-image.json)
          echo "Vulnerabilidades en imagen (MEDIUM+): $VULN_COUNT"
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "üö® Pipeline detenido: imagen con vulnerabilidades medias o mayores (Image Security)."
            exit 1
          else
            echo "‚úÖ Imagen sin vulnerabilidades MEDIUM/HIGH/CRITICAL. Pipeline exitoso."
          fi

      - name: Publicar reporte de imagen
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report-${{ github.sha }}
          path: trivy-image.json
          if-no-files-found: error
